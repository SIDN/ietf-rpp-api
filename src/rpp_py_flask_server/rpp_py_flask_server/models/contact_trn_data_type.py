from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rpp_py_flask_server.models.base_model import Model
from rpp_py_flask_server.models.eppcom_tr_status_type import EppcomTrStatusType
from rpp_py_flask_server import util

from rpp_py_flask_server.models.eppcom_tr_status_type import EppcomTrStatusType  # noqa: E501

class ContactTrnDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ac_date=None, ac_id=None, id=None, re_date=None, re_id=None, tr_status=None):  # noqa: E501
        """ContactTrnDataType - a model defined in OpenAPI

        :param ac_date: The ac_date of this ContactTrnDataType.  # noqa: E501
        :type ac_date: datetime
        :param ac_id: The ac_id of this ContactTrnDataType.  # noqa: E501
        :type ac_id: str
        :param id: The id of this ContactTrnDataType.  # noqa: E501
        :type id: str
        :param re_date: The re_date of this ContactTrnDataType.  # noqa: E501
        :type re_date: datetime
        :param re_id: The re_id of this ContactTrnDataType.  # noqa: E501
        :type re_id: str
        :param tr_status: The tr_status of this ContactTrnDataType.  # noqa: E501
        :type tr_status: EppcomTrStatusType
        """
        self.openapi_types = {
            'ac_date': datetime,
            'ac_id': str,
            'id': str,
            're_date': datetime,
            're_id': str,
            'tr_status': EppcomTrStatusType
        }

        self.attribute_map = {
            'ac_date': 'acDate',
            'ac_id': 'acID',
            'id': 'id',
            're_date': 'reDate',
            're_id': 'reID',
            'tr_status': 'trStatus'
        }

        self._ac_date = ac_date
        self._ac_id = ac_id
        self._id = id
        self._re_date = re_date
        self._re_id = re_id
        self._tr_status = tr_status

    @classmethod
    def from_dict(cls, dikt) -> 'ContactTrnDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact_trnDataType of this ContactTrnDataType.  # noqa: E501
        :rtype: ContactTrnDataType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ac_date(self) -> datetime:
        """Gets the ac_date of this ContactTrnDataType.


        :return: The ac_date of this ContactTrnDataType.
        :rtype: datetime
        """
        return self._ac_date

    @ac_date.setter
    def ac_date(self, ac_date: datetime):
        """Sets the ac_date of this ContactTrnDataType.


        :param ac_date: The ac_date of this ContactTrnDataType.
        :type ac_date: datetime
        """
        if ac_date is None:
            raise ValueError("Invalid value for `ac_date`, must not be `None`")  # noqa: E501

        self._ac_date = ac_date

    @property
    def ac_id(self) -> str:
        """Gets the ac_id of this ContactTrnDataType.


        :return: The ac_id of this ContactTrnDataType.
        :rtype: str
        """
        return self._ac_id

    @ac_id.setter
    def ac_id(self, ac_id: str):
        """Sets the ac_id of this ContactTrnDataType.


        :param ac_id: The ac_id of this ContactTrnDataType.
        :type ac_id: str
        """
        if ac_id is None:
            raise ValueError("Invalid value for `ac_id`, must not be `None`")  # noqa: E501
        if ac_id is not None and len(ac_id) > 16:
            raise ValueError("Invalid value for `ac_id`, length must be less than or equal to `16`")  # noqa: E501
        if ac_id is not None and len(ac_id) < 3:
            raise ValueError("Invalid value for `ac_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._ac_id = ac_id

    @property
    def id(self) -> str:
        """Gets the id of this ContactTrnDataType.


        :return: The id of this ContactTrnDataType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ContactTrnDataType.


        :param id: The id of this ContactTrnDataType.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 16:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `16`")  # noqa: E501
        if id is not None and len(id) < 3:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `3`")  # noqa: E501

        self._id = id

    @property
    def re_date(self) -> datetime:
        """Gets the re_date of this ContactTrnDataType.


        :return: The re_date of this ContactTrnDataType.
        :rtype: datetime
        """
        return self._re_date

    @re_date.setter
    def re_date(self, re_date: datetime):
        """Sets the re_date of this ContactTrnDataType.


        :param re_date: The re_date of this ContactTrnDataType.
        :type re_date: datetime
        """
        if re_date is None:
            raise ValueError("Invalid value for `re_date`, must not be `None`")  # noqa: E501

        self._re_date = re_date

    @property
    def re_id(self) -> str:
        """Gets the re_id of this ContactTrnDataType.


        :return: The re_id of this ContactTrnDataType.
        :rtype: str
        """
        return self._re_id

    @re_id.setter
    def re_id(self, re_id: str):
        """Sets the re_id of this ContactTrnDataType.


        :param re_id: The re_id of this ContactTrnDataType.
        :type re_id: str
        """
        if re_id is None:
            raise ValueError("Invalid value for `re_id`, must not be `None`")  # noqa: E501
        if re_id is not None and len(re_id) > 16:
            raise ValueError("Invalid value for `re_id`, length must be less than or equal to `16`")  # noqa: E501
        if re_id is not None and len(re_id) < 3:
            raise ValueError("Invalid value for `re_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._re_id = re_id

    @property
    def tr_status(self) -> EppcomTrStatusType:
        """Gets the tr_status of this ContactTrnDataType.


        :return: The tr_status of this ContactTrnDataType.
        :rtype: EppcomTrStatusType
        """
        return self._tr_status

    @tr_status.setter
    def tr_status(self, tr_status: EppcomTrStatusType):
        """Sets the tr_status of this ContactTrnDataType.


        :param tr_status: The tr_status of this ContactTrnDataType.
        :type tr_status: EppcomTrStatusType
        """
        if tr_status is None:
            raise ValueError("Invalid value for `tr_status`, must not be `None`")  # noqa: E501

        self._tr_status = tr_status

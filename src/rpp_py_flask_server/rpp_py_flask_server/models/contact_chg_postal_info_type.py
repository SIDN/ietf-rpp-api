from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rpp_py_flask_server.models.base_model import Model
from rpp_py_flask_server.models.contact_addr_type import ContactAddrType
from rpp_py_flask_server import util

from rpp_py_flask_server.models.contact_addr_type import ContactAddrType  # noqa: E501

class ContactChgPostalInfoType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, addr=None, name=None, org=None):  # noqa: E501
        """ContactChgPostalInfoType - a model defined in OpenAPI

        :param type: The type of this ContactChgPostalInfoType.  # noqa: E501
        :type type: str
        :param addr: The addr of this ContactChgPostalInfoType.  # noqa: E501
        :type addr: ContactAddrType
        :param name: The name of this ContactChgPostalInfoType.  # noqa: E501
        :type name: str
        :param org: The org of this ContactChgPostalInfoType.  # noqa: E501
        :type org: str
        """
        self.openapi_types = {
            'type': str,
            'addr': ContactAddrType,
            'name': str,
            'org': str
        }

        self.attribute_map = {
            'type': '@type',
            'addr': 'addr',
            'name': 'name',
            'org': 'org'
        }

        self._type = type
        self._addr = addr
        self._name = name
        self._org = org

    @classmethod
    def from_dict(cls, dikt) -> 'ContactChgPostalInfoType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact_chgPostalInfoType of this ContactChgPostalInfoType.  # noqa: E501
        :rtype: ContactChgPostalInfoType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ContactChgPostalInfoType.


        :return: The type of this ContactChgPostalInfoType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ContactChgPostalInfoType.


        :param type: The type of this ContactChgPostalInfoType.
        :type type: str
        """
        allowed_values = ["loc", "int"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def addr(self) -> ContactAddrType:
        """Gets the addr of this ContactChgPostalInfoType.


        :return: The addr of this ContactChgPostalInfoType.
        :rtype: ContactAddrType
        """
        return self._addr

    @addr.setter
    def addr(self, addr: ContactAddrType):
        """Sets the addr of this ContactChgPostalInfoType.


        :param addr: The addr of this ContactChgPostalInfoType.
        :type addr: ContactAddrType
        """

        self._addr = addr

    @property
    def name(self) -> str:
        """Gets the name of this ContactChgPostalInfoType.


        :return: The name of this ContactChgPostalInfoType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ContactChgPostalInfoType.


        :param name: The name of this ContactChgPostalInfoType.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def org(self) -> str:
        """Gets the org of this ContactChgPostalInfoType.


        :return: The org of this ContactChgPostalInfoType.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org: str):
        """Sets the org of this ContactChgPostalInfoType.


        :param org: The org of this ContactChgPostalInfoType.
        :type org: str
        """
        if org is not None and len(org) > 255:
            raise ValueError("Invalid value for `org`, length must be less than or equal to `255`")  # noqa: E501

        self._org = org

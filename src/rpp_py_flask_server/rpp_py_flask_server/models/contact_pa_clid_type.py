from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rpp_py_flask_server.models.base_model import Model
from rpp_py_flask_server import util


class ContactPaCLIDType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, pa_result=None):  # noqa: E501
        """ContactPaCLIDType - a model defined in OpenAPI

        :param value: The value of this ContactPaCLIDType.  # noqa: E501
        :type value: str
        :param pa_result: The pa_result of this ContactPaCLIDType.  # noqa: E501
        :type pa_result: bool
        """
        self.openapi_types = {
            'value': str,
            'pa_result': bool
        }

        self.attribute_map = {
            'value': '#value',
            'pa_result': '@paResult'
        }

        self._value = value
        self._pa_result = pa_result

    @classmethod
    def from_dict(cls, dikt) -> 'ContactPaCLIDType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact_paCLIDType of this ContactPaCLIDType.  # noqa: E501
        :rtype: ContactPaCLIDType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """Gets the value of this ContactPaCLIDType.


        :return: The value of this ContactPaCLIDType.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ContactPaCLIDType.


        :param value: The value of this ContactPaCLIDType.
        :type value: str
        """
        if value is not None and len(value) > 16:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `16`")  # noqa: E501
        if value is not None and len(value) < 3:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `3`")  # noqa: E501

        self._value = value

    @property
    def pa_result(self) -> bool:
        """Gets the pa_result of this ContactPaCLIDType.


        :return: The pa_result of this ContactPaCLIDType.
        :rtype: bool
        """
        return self._pa_result

    @pa_result.setter
    def pa_result(self, pa_result: bool):
        """Sets the pa_result of this ContactPaCLIDType.


        :param pa_result: The pa_result of this ContactPaCLIDType.
        :type pa_result: bool
        """

        self._pa_result = pa_result

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rpp_py_flask_server.models.base_model import Model
from rpp_py_flask_server.models.contact_status_type import ContactStatusType
from rpp_py_flask_server import util

from rpp_py_flask_server.models.contact_status_type import ContactStatusType  # noqa: E501

class ContactAddRemType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None):  # noqa: E501
        """ContactAddRemType - a model defined in OpenAPI

        :param status: The status of this ContactAddRemType.  # noqa: E501
        :type status: List[ContactStatusType]
        """
        self.openapi_types = {
            'status': List[ContactStatusType]
        }

        self.attribute_map = {
            'status': 'status'
        }

        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ContactAddRemType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact_addRemType of this ContactAddRemType.  # noqa: E501
        :rtype: ContactAddRemType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> List[ContactStatusType]:
        """Gets the status of this ContactAddRemType.


        :return: The status of this ContactAddRemType.
        :rtype: List[ContactStatusType]
        """
        return self._status

    @status.setter
    def status(self, status: List[ContactStatusType]):
        """Sets the status of this ContactAddRemType.


        :param status: The status of this ContactAddRemType.
        :type status: List[ContactStatusType]
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if status is not None and len(status) > 7:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `7`")  # noqa: E501
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._status = status

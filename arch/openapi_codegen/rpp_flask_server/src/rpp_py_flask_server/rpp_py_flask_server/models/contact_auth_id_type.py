from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rpp_py_flask_server.models.base_model import Model
from rpp_py_flask_server.models.contact_auth_info_type import ContactAuthInfoType
from rpp_py_flask_server import util

from rpp_py_flask_server.models.contact_auth_info_type import ContactAuthInfoType  # noqa: E501

class ContactAuthIDType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_info=None, id=None):  # noqa: E501
        """ContactAuthIDType - a model defined in OpenAPI

        :param auth_info: The auth_info of this ContactAuthIDType.  # noqa: E501
        :type auth_info: ContactAuthInfoType
        :param id: The id of this ContactAuthIDType.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'auth_info': ContactAuthInfoType,
            'id': str
        }

        self.attribute_map = {
            'auth_info': 'authInfo',
            'id': 'id'
        }

        self._auth_info = auth_info
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'ContactAuthIDType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact_authIDType of this ContactAuthIDType.  # noqa: E501
        :rtype: ContactAuthIDType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_info(self) -> ContactAuthInfoType:
        """Gets the auth_info of this ContactAuthIDType.


        :return: The auth_info of this ContactAuthIDType.
        :rtype: ContactAuthInfoType
        """
        return self._auth_info

    @auth_info.setter
    def auth_info(self, auth_info: ContactAuthInfoType):
        """Sets the auth_info of this ContactAuthIDType.


        :param auth_info: The auth_info of this ContactAuthIDType.
        :type auth_info: ContactAuthInfoType
        """

        self._auth_info = auth_info

    @property
    def id(self) -> str:
        """Gets the id of this ContactAuthIDType.


        :return: The id of this ContactAuthIDType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ContactAuthIDType.


        :param id: The id of this ContactAuthIDType.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 16:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `16`")  # noqa: E501
        if id is not None and len(id) < 3:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `3`")  # noqa: E501

        self._id = id

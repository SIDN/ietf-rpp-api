from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rpp_py_flask_server.models.base_model import Model
from rpp_py_flask_server.models.contact_auth_info_type import ContactAuthInfoType
from rpp_py_flask_server.models.contact_disclose_type import ContactDiscloseType
from rpp_py_flask_server.models.contact_e164_type import ContactE164Type
from rpp_py_flask_server.models.contact_postal_info_type import ContactPostalInfoType
from rpp_py_flask_server.models.contact_status_type import ContactStatusType
from rpp_py_flask_server import util

from rpp_py_flask_server.models.contact_auth_info_type import ContactAuthInfoType  # noqa: E501
from rpp_py_flask_server.models.contact_disclose_type import ContactDiscloseType  # noqa: E501
from rpp_py_flask_server.models.contact_e164_type import ContactE164Type  # noqa: E501
from rpp_py_flask_server.models.contact_postal_info_type import ContactPostalInfoType  # noqa: E501
from rpp_py_flask_server.models.contact_status_type import ContactStatusType  # noqa: E501

class ContactInfDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_info=None, cl_id=None, cr_date=None, cr_id=None, disclose=None, email=None, fax=None, id=None, postal_info=None, roid=None, status=None, tr_date=None, up_date=None, up_id=None, voice=None):  # noqa: E501
        """ContactInfDataType - a model defined in OpenAPI

        :param auth_info: The auth_info of this ContactInfDataType.  # noqa: E501
        :type auth_info: ContactAuthInfoType
        :param cl_id: The cl_id of this ContactInfDataType.  # noqa: E501
        :type cl_id: str
        :param cr_date: The cr_date of this ContactInfDataType.  # noqa: E501
        :type cr_date: datetime
        :param cr_id: The cr_id of this ContactInfDataType.  # noqa: E501
        :type cr_id: str
        :param disclose: The disclose of this ContactInfDataType.  # noqa: E501
        :type disclose: ContactDiscloseType
        :param email: The email of this ContactInfDataType.  # noqa: E501
        :type email: str
        :param fax: The fax of this ContactInfDataType.  # noqa: E501
        :type fax: ContactE164Type
        :param id: The id of this ContactInfDataType.  # noqa: E501
        :type id: str
        :param postal_info: The postal_info of this ContactInfDataType.  # noqa: E501
        :type postal_info: List[ContactPostalInfoType]
        :param roid: The roid of this ContactInfDataType.  # noqa: E501
        :type roid: str
        :param status: The status of this ContactInfDataType.  # noqa: E501
        :type status: List[ContactStatusType]
        :param tr_date: The tr_date of this ContactInfDataType.  # noqa: E501
        :type tr_date: datetime
        :param up_date: The up_date of this ContactInfDataType.  # noqa: E501
        :type up_date: datetime
        :param up_id: The up_id of this ContactInfDataType.  # noqa: E501
        :type up_id: str
        :param voice: The voice of this ContactInfDataType.  # noqa: E501
        :type voice: ContactE164Type
        """
        self.openapi_types = {
            'auth_info': ContactAuthInfoType,
            'cl_id': str,
            'cr_date': datetime,
            'cr_id': str,
            'disclose': ContactDiscloseType,
            'email': str,
            'fax': ContactE164Type,
            'id': str,
            'postal_info': List[ContactPostalInfoType],
            'roid': str,
            'status': List[ContactStatusType],
            'tr_date': datetime,
            'up_date': datetime,
            'up_id': str,
            'voice': ContactE164Type
        }

        self.attribute_map = {
            'auth_info': 'authInfo',
            'cl_id': 'clID',
            'cr_date': 'crDate',
            'cr_id': 'crID',
            'disclose': 'disclose',
            'email': 'email',
            'fax': 'fax',
            'id': 'id',
            'postal_info': 'postalInfo',
            'roid': 'roid',
            'status': 'status',
            'tr_date': 'trDate',
            'up_date': 'upDate',
            'up_id': 'upID',
            'voice': 'voice'
        }

        self._auth_info = auth_info
        self._cl_id = cl_id
        self._cr_date = cr_date
        self._cr_id = cr_id
        self._disclose = disclose
        self._email = email
        self._fax = fax
        self._id = id
        self._postal_info = postal_info
        self._roid = roid
        self._status = status
        self._tr_date = tr_date
        self._up_date = up_date
        self._up_id = up_id
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt) -> 'ContactInfDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The contact_infDataType of this ContactInfDataType.  # noqa: E501
        :rtype: ContactInfDataType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_info(self) -> ContactAuthInfoType:
        """Gets the auth_info of this ContactInfDataType.


        :return: The auth_info of this ContactInfDataType.
        :rtype: ContactAuthInfoType
        """
        return self._auth_info

    @auth_info.setter
    def auth_info(self, auth_info: ContactAuthInfoType):
        """Sets the auth_info of this ContactInfDataType.


        :param auth_info: The auth_info of this ContactInfDataType.
        :type auth_info: ContactAuthInfoType
        """

        self._auth_info = auth_info

    @property
    def cl_id(self) -> str:
        """Gets the cl_id of this ContactInfDataType.


        :return: The cl_id of this ContactInfDataType.
        :rtype: str
        """
        return self._cl_id

    @cl_id.setter
    def cl_id(self, cl_id: str):
        """Sets the cl_id of this ContactInfDataType.


        :param cl_id: The cl_id of this ContactInfDataType.
        :type cl_id: str
        """
        if cl_id is None:
            raise ValueError("Invalid value for `cl_id`, must not be `None`")  # noqa: E501
        if cl_id is not None and len(cl_id) > 16:
            raise ValueError("Invalid value for `cl_id`, length must be less than or equal to `16`")  # noqa: E501
        if cl_id is not None and len(cl_id) < 3:
            raise ValueError("Invalid value for `cl_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._cl_id = cl_id

    @property
    def cr_date(self) -> datetime:
        """Gets the cr_date of this ContactInfDataType.


        :return: The cr_date of this ContactInfDataType.
        :rtype: datetime
        """
        return self._cr_date

    @cr_date.setter
    def cr_date(self, cr_date: datetime):
        """Sets the cr_date of this ContactInfDataType.


        :param cr_date: The cr_date of this ContactInfDataType.
        :type cr_date: datetime
        """
        if cr_date is None:
            raise ValueError("Invalid value for `cr_date`, must not be `None`")  # noqa: E501

        self._cr_date = cr_date

    @property
    def cr_id(self) -> str:
        """Gets the cr_id of this ContactInfDataType.


        :return: The cr_id of this ContactInfDataType.
        :rtype: str
        """
        return self._cr_id

    @cr_id.setter
    def cr_id(self, cr_id: str):
        """Sets the cr_id of this ContactInfDataType.


        :param cr_id: The cr_id of this ContactInfDataType.
        :type cr_id: str
        """
        if cr_id is None:
            raise ValueError("Invalid value for `cr_id`, must not be `None`")  # noqa: E501
        if cr_id is not None and len(cr_id) > 16:
            raise ValueError("Invalid value for `cr_id`, length must be less than or equal to `16`")  # noqa: E501
        if cr_id is not None and len(cr_id) < 3:
            raise ValueError("Invalid value for `cr_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._cr_id = cr_id

    @property
    def disclose(self) -> ContactDiscloseType:
        """Gets the disclose of this ContactInfDataType.


        :return: The disclose of this ContactInfDataType.
        :rtype: ContactDiscloseType
        """
        return self._disclose

    @disclose.setter
    def disclose(self, disclose: ContactDiscloseType):
        """Sets the disclose of this ContactInfDataType.


        :param disclose: The disclose of this ContactInfDataType.
        :type disclose: ContactDiscloseType
        """

        self._disclose = disclose

    @property
    def email(self) -> str:
        """Gets the email of this ContactInfDataType.


        :return: The email of this ContactInfDataType.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ContactInfDataType.


        :param email: The email of this ContactInfDataType.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def fax(self) -> ContactE164Type:
        """Gets the fax of this ContactInfDataType.


        :return: The fax of this ContactInfDataType.
        :rtype: ContactE164Type
        """
        return self._fax

    @fax.setter
    def fax(self, fax: ContactE164Type):
        """Sets the fax of this ContactInfDataType.


        :param fax: The fax of this ContactInfDataType.
        :type fax: ContactE164Type
        """

        self._fax = fax

    @property
    def id(self) -> str:
        """Gets the id of this ContactInfDataType.


        :return: The id of this ContactInfDataType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ContactInfDataType.


        :param id: The id of this ContactInfDataType.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 16:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `16`")  # noqa: E501
        if id is not None and len(id) < 3:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `3`")  # noqa: E501

        self._id = id

    @property
    def postal_info(self) -> List[ContactPostalInfoType]:
        """Gets the postal_info of this ContactInfDataType.


        :return: The postal_info of this ContactInfDataType.
        :rtype: List[ContactPostalInfoType]
        """
        return self._postal_info

    @postal_info.setter
    def postal_info(self, postal_info: List[ContactPostalInfoType]):
        """Sets the postal_info of this ContactInfDataType.


        :param postal_info: The postal_info of this ContactInfDataType.
        :type postal_info: List[ContactPostalInfoType]
        """
        if postal_info is None:
            raise ValueError("Invalid value for `postal_info`, must not be `None`")  # noqa: E501
        if postal_info is not None and len(postal_info) > 2:
            raise ValueError("Invalid value for `postal_info`, number of items must be less than or equal to `2`")  # noqa: E501
        if postal_info is not None and len(postal_info) < 1:
            raise ValueError("Invalid value for `postal_info`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._postal_info = postal_info

    @property
    def roid(self) -> str:
        """Gets the roid of this ContactInfDataType.


        :return: The roid of this ContactInfDataType.
        :rtype: str
        """
        return self._roid

    @roid.setter
    def roid(self, roid: str):
        """Sets the roid of this ContactInfDataType.


        :param roid: The roid of this ContactInfDataType.
        :type roid: str
        """
        if roid is None:
            raise ValueError("Invalid value for `roid`, must not be `None`")  # noqa: E501

        self._roid = roid

    @property
    def status(self) -> List[ContactStatusType]:
        """Gets the status of this ContactInfDataType.


        :return: The status of this ContactInfDataType.
        :rtype: List[ContactStatusType]
        """
        return self._status

    @status.setter
    def status(self, status: List[ContactStatusType]):
        """Sets the status of this ContactInfDataType.


        :param status: The status of this ContactInfDataType.
        :type status: List[ContactStatusType]
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if status is not None and len(status) > 7:
            raise ValueError("Invalid value for `status`, number of items must be less than or equal to `7`")  # noqa: E501
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._status = status

    @property
    def tr_date(self) -> datetime:
        """Gets the tr_date of this ContactInfDataType.


        :return: The tr_date of this ContactInfDataType.
        :rtype: datetime
        """
        return self._tr_date

    @tr_date.setter
    def tr_date(self, tr_date: datetime):
        """Sets the tr_date of this ContactInfDataType.


        :param tr_date: The tr_date of this ContactInfDataType.
        :type tr_date: datetime
        """

        self._tr_date = tr_date

    @property
    def up_date(self) -> datetime:
        """Gets the up_date of this ContactInfDataType.


        :return: The up_date of this ContactInfDataType.
        :rtype: datetime
        """
        return self._up_date

    @up_date.setter
    def up_date(self, up_date: datetime):
        """Sets the up_date of this ContactInfDataType.


        :param up_date: The up_date of this ContactInfDataType.
        :type up_date: datetime
        """

        self._up_date = up_date

    @property
    def up_id(self) -> str:
        """Gets the up_id of this ContactInfDataType.


        :return: The up_id of this ContactInfDataType.
        :rtype: str
        """
        return self._up_id

    @up_id.setter
    def up_id(self, up_id: str):
        """Sets the up_id of this ContactInfDataType.


        :param up_id: The up_id of this ContactInfDataType.
        :type up_id: str
        """
        if up_id is not None and len(up_id) > 16:
            raise ValueError("Invalid value for `up_id`, length must be less than or equal to `16`")  # noqa: E501
        if up_id is not None and len(up_id) < 3:
            raise ValueError("Invalid value for `up_id`, length must be greater than or equal to `3`")  # noqa: E501

        self._up_id = up_id

    @property
    def voice(self) -> ContactE164Type:
        """Gets the voice of this ContactInfDataType.


        :return: The voice of this ContactInfDataType.
        :rtype: ContactE164Type
        """
        return self._voice

    @voice.setter
    def voice(self, voice: ContactE164Type):
        """Sets the voice of this ContactInfDataType.


        :param voice: The voice of this ContactInfDataType.
        :type voice: ContactE164Type
        """

        self._voice = voice
